# -*- coding: utf-8 -*-
"""firstproject_titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1knuGovDLeWkdfLsRmd1K-evndgYLG3Pp
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.preprocessing import StandardScaler,LabelEncoder,OneHotEncoder



df=pd.read_csv('titanic.csv')

df.head()

df.info()

df.shape

df.describe()

df.drop_duplicates(inplace=True)

df.isnull().sum()

df['Age'].fillna(df['Age'].mean(),inplace=True)
df['Embarked'].fillna(df['Embarked'].mode()[0],inplace=True)

df.drop(['Cabin','Name','Ticket','PassengerId'],axis=1,inplace=True)

df.head()

numeric_columns=['Survived', 'Pclass', 'Age', 'SibSp', 'Parch',]

for col in numeric_columns:
    plt.figure(figsize=(10,5))
    sns.histplot(df[col])
    plt.show()

for col in numeric_columns:
    plt.figure(figsize=(10,5))
    sns.boxplot(df[col])
    plt.show()

sns.countplot(x=df['Survived'])

sns.countplot(x=df['Sex'])

sns.countplot(x=df['Pclass'])

sns.countplot(x=df['Embarked'])

sns.countplot(x=df['SibSp'])

sns.heatmap(df.corr(numeric_only=True),annot=True)

le=LabelEncoder()
df['Sex']=le.fit_transform(df['Sex'])

df.head()

df=pd.get_dummies(df,columns=['Embarked','Pclass'])

df=df.astype(int)

df.head()

sc=StandardScaler()
df['Age']=sc.fit_transform(df[['Age']])
df['Fare']=sc.fit_transform(df[['Fare']])

df.head()

x = df.drop('Survived', axis=1)
y = df['Survived']

x_train, x_test, y_train, y_test = train_test_split(
   x, y,
    test_size=0.2,
    random_state=42
)

model=LogisticRegression()
model.fit(x_train,y_train)

y_pred=model.predict(x_test)

from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, y_pred))

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import RandomizedSearchCV

# parameter space
param_dist = {
    'n_estimators': [100, 200, 300, 400, 500],   # trees ki ginti
    'max_depth': [None, 5, 10, 20, 30],          # tree depth
    'min_samples_split': [2, 5, 10],             # node split condition
    'min_samples_leaf': [1, 2, 4],               # leaf size
    'max_features': ['sqrt', 'log2']             # features selection
}

# base model
rf = RandomForestClassifier(random_state=42)

# randomized search
random_search = RandomizedSearchCV(
    rf,
    param_distributions=param_dist,
    n_iter=20,        # 20 random combinations try karega
    cv=5,             # 5-fold cross validation
    scoring='accuracy',
    random_state=42,
    n_jobs=-1
)

# fit on training data
random_search.fit(x_train, y_train)

print("Best Parameters:", random_search.best_params_)
print("Best CV Accuracy:", random_search.best_score_)

# best model se prediction
best_model = random_search.best_estimator_
y_pred = best_model.predict(x_test)

from sklearn.metrics import accuracy_score
print("Test Accuracy:", accuracy_score(y_test, y_pred))

from sklearn.metrics import confusion_matrix, classification_report

print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

from sklearn.ensemble import RandomForestClassifier

final_model = RandomForestClassifier(
    n_estimators=100,
    min_samples_split=10,
    min_samples_leaf=1,
    max_features='log2',
    max_depth=30,
    random_state=42
)

final_model.fit(x_train, y_train)

y_pred = final_model.predict(x_test)

from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))